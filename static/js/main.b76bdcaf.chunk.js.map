{"version":3,"sources":["stateful_timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Resettime","setState","millisecond","clearInterval","incrementer","Startpause","state","isstart","Starttime","Pausetime","bind","assertThisInitialized","_this2","setInterval","parseInt","_this3","react_default","a","createElement","className","Math","floor","toString","padStart","type","value","onClick","onChange","event","target","React","Component","App","stateful_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAoDeA,cA/Cf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBPQ,UAAY,WACRP,EAAKQ,SAAS,CAACC,YAAY,IAC3BC,cAAcV,EAAKW,cAxBJX,EA0BnBY,WAAa,WAAOZ,EAAKa,MAAMC,QAASd,EAAKe,YAAcf,EAAKgB,aAvBhEhB,EAAKa,MAAQ,CAACJ,YAAY,EAAIK,SAAU,GACxCd,EAAKO,UAAYP,EAAKO,UAAUU,KAAfhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KACjBA,EAAKe,UAAYf,EAAKe,UAAUE,KAAfhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KACjBA,EAAKgB,UAAYhB,EAAKgB,UAAUC,KAAfhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAEjBA,EAAKW,YAAc,EARAX,2EAWN,IAAAmB,EAAAhB,KACRA,KAAKQ,YAAcS,YAAY,kBAAID,EAAKX,SAAS,CAAEC,YAAaY,SAASF,EAAKN,MAAMJ,aAAe,OAAO,KAC1GN,KAAKK,SAAS,CAACM,SAAQ,wCAIxBJ,cAAcP,KAAKQ,aACnBR,KAAKK,SAAS,CAACM,SAAQ,qCAUlB,IAAAQ,EAAAnB,KACT,OAASoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACxBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,IAAsBC,KAAKC,MAAQzB,KAAKU,MAAMJ,YAAY,IAAS,MAAOoB,WAAWC,SAAS,EAAE,KAAhG,IAAuGH,KAAKC,MAASzB,KAAKU,MAAMJ,YAAY,IAAS,KAAU,IAAKoB,WAAWC,SAAS,EAAE,KAA1L,IAAiMH,KAAKC,MAAQzB,KAAKU,MAAMJ,YAAY,IAAO,IAAKoB,WAAWC,SAAS,EAAE,MACvQP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACCF,EAAAC,EAAAC,cAAA,wBAEDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASC,MAAS7B,KAAKU,MAAMC,QAAS,QAAU,QAASmB,QAAS9B,KAAKS,aACnFW,EAAAC,EAAAC,cAAA,SAAOM,KAAK,QAAQC,MAAQ,QAAQC,QAAS9B,KAAKI,aAElDgB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,2DACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBAAoBK,KAAK,OAAOC,MAAO7B,KAAKU,MAAMJ,YAAayB,SAAU,SAAAC,GAAK,OAAGb,EAAKd,SAAS,CAACC,YAAY0B,EAAMC,OAAOJ,mBA3CtHK,IAAMC,WCYZC,mLATX,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACe,EAAD,cAJYF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b76bdcaf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Timer extends  React.Component {\r\n\r\nconstructor(props) {\r\n super(props)\r\n\r\nthis.state = {millisecond:0 , isstart : true}\r\nthis.Resettime = this.Resettime.bind(this)\r\nthis.Starttime = this.Starttime.bind(this)\r\nthis.Pausetime = this.Pausetime.bind(this)\r\n\r\nthis.incrementer = 0;\r\n    }\r\n\r\nStarttime () { \r\n     this.incrementer = setInterval(()=>this.setState({ millisecond: parseInt(this.state.millisecond) + 1000}),1000)\r\n     this.setState({isstart:false})\r\n}\r\n\r\nPausetime () {  \r\n    clearInterval(this.incrementer) \r\n    this.setState({isstart:true})\r\n}\r\n\r\n\r\nResettime = () => {\r\n    this.setState({millisecond:0}) \r\n    clearInterval(this.incrementer)}\r\n\r\nStartpause = () => {this.state.isstart? this.Starttime() : this.Pausetime()}\r\n\r\nrender() {\r\nreturn ( <div className=\"timer\">\r\n<p className=\"time\"> {Math.floor ((this.state.millisecond/1000) / (3600)).toString().padStart(2,'0')}:{Math.floor (((this.state.millisecond/1000) % (3600)) / (60)).toString().padStart(2,'0')}:{Math.floor ((this.state.millisecond/1000)% 60 ).toString().padStart(2,'0')}</p>\r\n<p className=\"text\">\r\n<span>Hours</span>\r\n<span>Minutes</span>\r\n <span>Seconds</span>\r\n</p>\r\n<div className=\"timercontrol\">\r\n <input type=\"button\" value = {this.state.isstart? \"Start\" : \"Pause\"} onClick={this.Startpause}  />\r\n <input type=\"reset\" value = \"Reset\" onClick={this.Resettime} />\r\n </div>\r\n <p className=\"label\"> Pass a time value in milliseconds to the component :  </p>\r\n <input className=\"millisecondsinput\" type=\"text\" value={this.state.millisecond} onChange={event=> this.setState({millisecond:event.target.value})} />\r\n</div>\r\n    );\r\n}\r\n}\r\n\r\nexport default Timer ;","import React, { Component } from 'react';\nimport './App.css';\nimport  Timer from  './stateful_timer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Timer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}